"""
Email service for sending session results to instructor.
Uses SendGrid API.
"""

import os
from datetime import datetime
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Email, To, Content
from models import SessionSubmission, ScenarioResult


def format_session_report(submission: SessionSubmission) -> str:
    """
    Format session results as HTML email.
    """
    total_score = sum(r.score for r in submission.scenario_results)
    total_max = sum(r.max_score for r in submission.scenario_results)
    percentage = round((total_score / total_max * 100), 1) if total_max > 0 else 0

    html = f"""
    <html>
    <head>
        <style>
            body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #F6F4F0; padding: 20px; }}
            .container {{ max-width: 800px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; }}
            h1 {{ color: #2B2B2B; border-bottom: 3px solid #B2643C; padding-bottom: 10px; }}
            h2 {{ color: #52796F; margin-top: 25px; }}
            .summary {{ background-color: #F6F4F0; padding: 15px; border-left: 4px solid #84A98C; margin: 20px 0; }}
            .score {{ font-size: 24px; font-weight: bold; color: #52796F; }}
            table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
            th {{ background-color: #52796F; color: white; padding: 12px; text-align: left; }}
            td {{ padding: 10px; border-bottom: 1px solid #C0C7C4; }}
            tr:nth-child(even) {{ background-color: #F6F4F0; }}
            .correct {{ color: #84A98C; font-weight: bold; }}
            .incorrect {{ color: #B2643C; font-weight: bold; }}
            .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #C0C7C4; color: #8D99AE; font-size: 12px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Primary Source Trainer - Session Results</h1>

            <div class="summary">
                <p><strong>Student:</strong> {submission.student_name}</p>
                {f'<p><strong>Email:</strong> {submission.student_email}</p>' if submission.student_email else ''}
                <p><strong>Completed:</strong> {submission.timestamp.strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p class="score">Overall Score: {total_score}/{total_max} ({percentage}%)</p>
            </div>

            <h2>Scenario Breakdown</h2>
    """

    for i, result in enumerate(submission.scenario_results, 1):
        scenario_pct = round((result.score / result.max_score * 100), 1) if result.max_score > 0 else 0

        html += f"""
            <h3>Scenario {i}: {result.scenario_id}</h3>
            <p><strong>Topic:</strong> {result.topic_label}</p>
            <p><strong>Score:</strong> {result.score}/{result.max_score} ({scenario_pct}%)</p>

            <table>
                <tr>
                    <th>Node</th>
                    <th>Student Answer</th>
                    <th>Correct Answer</th>
                    <th>Points</th>
                    <th>Result</th>
                </tr>
        """

        for grade in result.results:
            result_class = "correct" if grade.is_correct else "incorrect"
            result_text = "✓ Correct" if grade.is_correct else "✗ Incorrect"

            html += f"""
                <tr>
                    <td>{grade.node_id}</td>
                    <td>{grade.student_answer}</td>
                    <td>{grade.correct_answer}</td>
                    <td>{grade.points}</td>
                    <td class="{result_class}">{result_text}</td>
                </tr>
            """

        html += "</table>"

    html += """
            <div class="footer">
                <p>Generated by Primary Source Trainer</p>
                <p>This is an automated email with student results from the early medieval source classification exercise.</p>
            </div>
        </div>
    </body>
    </html>
    """

    return html


def send_results_email(submission: SessionSubmission, instructor_email: str) -> dict:
    """
    Send session results to instructor via SendGrid.

    Returns:
        {"success": bool, "message": str}
    """
    api_key = os.getenv("SENDGRID_API_KEY")

    if not api_key:
        return {
            "success": False,
            "message": "SendGrid API key not configured. Set SENDGRID_API_KEY environment variable."
        }

    try:
        # Format email content
        html_content = format_session_report(submission)

        total_score = sum(r.score for r in submission.scenario_results)
        total_max = sum(r.max_score for r in submission.scenario_results)
        percentage = round((total_score / total_max * 100), 1) if total_max > 0 else 0

        subject = f"Primary Source Trainer Results - {submission.student_name} ({percentage}%)"

        # Create SendGrid message
        # Use verified sender email from environment or default to instructor email
        sender_email = os.getenv("SENDER_EMAIL", instructor_email)
        message = Mail(
            from_email=Email(sender_email, "Primary Source Trainer"),
            to_emails=To(instructor_email),
            subject=subject,
            html_content=Content("text/html", html_content)
        )

        # Add reply-to if student provided email
        if submission.student_email:
            message.reply_to = Email(submission.student_email, submission.student_name)

        # Send
        sg = SendGridAPIClient(api_key)
        response = sg.send(message)

        if response.status_code in [200, 201, 202]:
            return {
                "success": True,
                "message": f"Results sent to {instructor_email}"
            }
        else:
            return {
                "success": False,
                "message": f"SendGrid returned status {response.status_code}"
            }

    except Exception as e:
        return {
            "success": False,
            "message": f"Email error: {str(e)}"
        }


def format_plain_text_report(submission: SessionSubmission) -> str:
    """
    Generate plain text version for students to copy/paste if email fails.
    """
    total_score = sum(r.score for r in submission.scenario_results)
    total_max = sum(r.max_score for r in submission.scenario_results)
    percentage = round((total_score / total_max * 100), 1) if total_max > 0 else 0

    report = f"""
PRIMARY SOURCE TRAINER - SESSION RESULTS
{'=' * 60}

Student: {submission.student_name}
Completed: {submission.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
Overall Score: {total_score}/{total_max} ({percentage}%)

{'=' * 60}
SCENARIO BREAKDOWN
{'=' * 60}

"""

    for i, result in enumerate(submission.scenario_results, 1):
        scenario_pct = round((result.score / result.max_score * 100), 1) if result.max_score > 0 else 0

        report += f"\nScenario {i}: {result.scenario_id}\n"
        report += f"Topic: {result.topic_label}\n"
        report += f"Score: {result.score}/{result.max_score} ({scenario_pct}%)\n"
        report += f"{'-' * 60}\n"

        for grade in result.results:
            status = "✓" if grade.is_correct else "✗"
            report += f"  {status} {grade.node_id}\n"
            report += f"     Student: {grade.student_answer} | Correct: {grade.correct_answer}\n"
            report += f"     Points: {grade.points} | {grade.feedback}\n\n"

    report += f"\n{'=' * 60}\n"
    report += "End of Report\n"

    return report
